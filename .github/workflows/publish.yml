name: Publish to PyPI

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  test:
    name: Test on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: lukka/get-cmake@v3.25.1

      - name: Install Ninja
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          echo "C:\Program Files\ninja" >> $GITHUB_PATH

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build and install C extensions
        run: |
          cd stampix/auspostgen/_c

          # Create and configure build directory
          mkdir -p build
          cd build

          # Configure CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python)

          cmake --build . --config Release

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp Release/auspost.pyd ../
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # Try different possible output names
            if [ -f "libauspost.dylib" ]; then
              cp libauspost.dylib ../auspost.so
            elif [ -f "auspost.dylib" ]; then
              cp auspost.dylib ../auspost.so
            elif [ -f "auspost.so" ]; then
              cp auspost.so ../auspost.so
            else
              echo "Error: Could not find the built library file"
              ls -la
              exit 1
            fi
          else
            # Try different possible output names
            if [ -f "libauspost.so" ]; then
              cp libauspost.so ../auspost.so
            elif [ -f "auspost.so" ]; then
              cp auspost.so ../auspost.so
            else
              echo "Error: Could not find the built library file"
              ls -la
              exit 1
            fi
          fi

          cd ../../../../

      - name: Run tests
        run: poetry run pytest

      - name: Run linting
        run: |
          poetry run black --check .
          poetry run isort --check .
          poetry run ruff check .

      - name: Run type checking
        run: poetry run mypy .

  semantic-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Semantic Release Version
        id: release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry run semantic-release version --commit --vcs-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release Publish
        id: publish
        run: poetry run semantic-release publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install CMake
        uses: lukka/get-cmake@v3.25.1

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build and install C extensions
        run: |
          cd stampix/auspostgen/_c

          # Create and configure build directory
          mkdir -p build
          cd build

          # Configure CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python)

          # Build
          cmake --build . --config Release

          # Install the built extension
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp Release/auspost.pyd ../
          else
            cp auspost.so ../auspost.so
          fi

          cd ../../../../

      - name: Build package
        run: poetry build

      - name: Verify wheels
        run: |
          # Create a clean virtual environment
          python -m venv venv
          source venv/bin/activate

          # Install the wheel
          pip install dist/*.whl

          # Verify the package can be imported
          python -c "import stampix.auspostgen"

          # Run basic functionality test
          python -c "from stampix.auspostgen.generator import write_image; print('Package imports and basic functionality verified')"

          deactivate

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
