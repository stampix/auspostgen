name: Publish to PyPI

on: workflow_dispatch

permissions:
  id-token: write
  contents: write

jobs:
  test:
    name: Test on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: lukka/get-cmake@v3.25.1

      - name: Install Ninja
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          echo "C:\Program Files\ninja" >> $GITHUB_PATH

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.8.0
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build and install C extensions
        run: |
          cd stampix/auspostgen/_c

          # Create and configure build directory
          mkdir -p build
          cd build

          # Configure CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python)

          # Build
          cmake --build . --config Release

          # Install the built extension
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp Release/auspost.pyd ../
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # Try different possible output names
            if [ -f "libauspost.dylib" ]; then
              cp libauspost.dylib ../auspost.so
            elif [ -f "auspost.dylib" ]; then
              cp auspost.dylib ../auspost.so
            elif [ -f "auspost.so" ]; then
              cp auspost.so ../auspost.so
            else
              echo "Error: Could not find the built library file"
              ls -la
              exit 1
            fi
          else
            # Try different possible output names
            if [ -f "libauspost.so" ]; then
              cp libauspost.so ../auspost.so
            elif [ -f "auspost.so" ]; then
              cp auspost.so ../auspost.so
            else
              echo "Error: Could not find the built library file"
              ls -la
              exit 1
            fi
          fi

          cd ../../../../

      - name: Run tests
        run: poetry run pytest

      - name: Run linting
        run: |
          poetry run black --check .
          poetry run isort --check .
          poetry run ruff check .

      - name: Run type checking
        run: poetry run mypy .

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 64-bit
          # arm
          - os: ubuntu-24.04-arm
            python: 310
            platform_id: manylinux_aarch64
            manylinux_image: manylinux2014
          # x86
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # MacOS arm
          - os: macos-14
            python: 310
            platform_id: macosx_arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          ## cibuildwheel requires 3.11
          python-version: 3.11

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.2

      - name: Set macOS deployment target
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | cut -d '.' -f 1-2)" >> $GITHUB_ENV

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          packages-dir: wheels
